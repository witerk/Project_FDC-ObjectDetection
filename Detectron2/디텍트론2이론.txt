RuntimeError: CUDA error: out of memory
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

================================

Detectron2가 다른 오픈 소스들에 비해 빠른이유는 python 최적화가 잘되어있기도 합니다만, 그 외에 연산량이 많이 드는 부분을 python이 아닌 CUDA와 C언어로 구현했기에 보다 좋은 성능을 냈습니다
(box iou를 계산하는 부분/ defromable conv 부분 -> CUDA)
python에 최적화 

디텍트론2가 더 정확하고 -> 5개를 탐지(물체, 선, 밀도, ???, ???)
욜로가 훨씬 더 빠르고 효율적
미세한 것 혹은 비슷한 객체를 구별하는 데에는 디텍트론2가 더 좋음

디텍트론2: 최신 객체 탐지 모델들을 포함해 정확성과 성능에 중점을 둔 라이브러리

욜로: 이미지를 그리드로 분할하고, 셀마다 객체의 경계상자와 클래스를 동시에 예측 -> 탐지 과정 단순화를 통해 속도 단축
욜로4 이후로는 앙상블 기법을 사용해 작은 모델을 여럿 결합 -> 정확성 향상

백여장 남짓의 작은 데이터셋에선 디텍트론이 빠르고 정확할지 모르지만, 산업용 대규모 셋에선 빠른 동작도 중요

================================

<디텍트론2>
- 파이썬에 최적화된 모델
- 연산량이 많이 드는 부분을 파이썬이 아닌 CUDA와 C언어로 구현
(box iou 계산/ defromable conv -> CUDA(GPU))
	ㄴ실제 대비, 예측된 바운딩박스와 겹치는 정도 측정
	ㄴDeformable Convolution: 기존과 달리 필터의 형태를 유동적으로 변화시켜 더 정교한 특징을 추출할 수 있게 함
- 정확성과 성능에 중점을 둔 라이브러리
- 최신의 컴퓨터 비전 모델들을 제공 (우리 팀은 Mask R-CNN사용)
- 고성능 하드웨어를 많이 사용하기 때문에 GPU 자원을 많이 요구
(이론적으로는 GPU을 활용한 병렬처리를 통해 욜로v8보다 빠른 속도를 구현할 수도 있지만, GPU자원을 많이 요구하기 때문에 어려움)
- 욜로에 비해 복잡하고 무거운 구조
- 높은 성능의 컴퓨터 비전 모델을 비교적 효율적이게 구현하고자 할 때 유용

<욜로v8>
- 탐지과정 단순화를 통해 속도 단축
	ㄴ이미지 분할 후, 각 셀마다 바운딩박스와 클래스를 동시에 예측
- 욜로v4 이후 앙상블 기법(작은 모델을 여럿 결합함)을 활용해 정확성 향상
- 경량화된 구조로 실시간 객체탐지가 용이하고 준수한 정확도가 특징

=> 결론
- 속도 측면에선 욜로v8이 더 빠름
- 모델의 성능 및 정확성은 디텍트론2가 더 좋음
- 실제 산업 현장에서는 대규모 데이터를 빠르게 처리하는 것이 중요하므로, 빠른 속도 및 비교적 준수한 정확도를 가진 욜로v8 모델 채택