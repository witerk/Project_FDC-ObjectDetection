목소리 잘 들리나요? > 체크

발표를 시작하겠습니다.

안녕하세요 데이터 플로우팀입니다.
저는 발표자인 최정인이고 저희 팀은,
김나영, 김예슬, 손아, 한나영으로 총 5명으로 구성되어있습니다.

저희 팀의 발표 주제는 객체탐지를 활용한 반도체 불량 자동 분류 모델 구현입니다.
------------------------------------------------------------------------
분석 환경 및 활용 라이브러리입니다.
파이썬을 분석언어로 사용하여 주피터, 아나콘다, 코랩, 깃허브, 노션에서 개발하였습니다. 
사용한 라이브러리 및 프레임 워크는 opencv, roboflow, pytorch 등을 활용하였습니다.
------------------------------------------------------------------------
목차

------------------------------------------------------------------------
객체 탐지를 활용하여 반도체 결함의 정보, 개수 및 수율을 실시간으로 감지하고 시각적으로 보여주는 웹을 구현하는 것이 목적으로 
반도체 제조 공정에서 품질 검수를 통한 수율을 증가시키고 EDS 과정에서의 인건비 절약과 같은 기대 효과가 있습니다.
결론적으로, 반도체 제조 과정의 효율성과 생산성을 향상시키고자 객체 탐지를 수행하였습니다.

------------------------------------------------------------------------
앞서 프로젝트 수행 전 반도체 제조 핵심 과정의 반도체 8대 공정을 소개하겠습니다.
화면에 보이는 순서대로 
웨이퍼 제조 -> 산화공정 -> 포토 공정 -> 식각 공정 -> 증착&이온 주입 공정 -> 금속 배정 공정 -> EDS공정 -> 패키징 공정이 있습니다.
저희는 이 중 불량 검출 단계인 EDS 공정 단계에서 객체 탐지 솔루션을 통해 수율을 보여주는 웹 구현을 수행할 예정입니다.

여기까지 프로젝트 배경을 소개드렸습니다.
다음은 프로젝트의 데이터를 소개드리겠습니다.
------------------------------------------------------------------------
저희의 데이터는 반도체 웨이퍼 칩 이미지이며 Jpg 파일 형식이고,
아래 그림과 같이 패턴은 총 2가지로
패턴 1은 136장, 패턴 2는 201장으로 총 337장의 데이터로 프로젝트를 시작하게 되었습니다.
이 데이터를 분석하는 단계에서, 337장의 이미지를 모두 확인한 후,
------------------------------------------------------------------------
결함 유형을 정의하였는데요.
결함 유형을 크게 이물 결함과 회로 결함이 있다고 판단하였고
세세하게는 이물 결함으로 닷, 쥐닷, 커브, 스크래치로 정의하였고
회로 결함으로는 씨 언더바 뒤에 결함 특징을 직관화하여 결함 유형을 정의하였습니다.

이렇게 정의 내린 결함에
------------------------------------------------------------------------
로보플로우라는 이미지 전처리 플랫폼을 이용하여 바운딩 박스를 적용하였습니다.

왼쪽은 원본 이미지이고 오른쪽은 로보플로우에서 바운딩 박스를 적용한 화면입니다.
이렇게 로보플로우에서 박스를 적용하며 데이터 레이블링을 해주었습니다.

로보플로우에서 데이터 증강 옵션과 바운딩 박스 좌표 파일, 트레인/밸리데이션/테스트를 나누어준 데이터셋을 제공받아 활용하였습니다.

------------------------------------------------------------------------
이렇게 로보플로우에서 제공받아온 데이터셋으로 모델 성능을 확인하려,
많은 객체 탐지 모델들 가운데 초기에 탐색을 해보았던 모델들 12가지입니다.
이 중 5가지를 선별하였고 이 모델들의 특징 및 장단점, 출시연도를 바탕으로
디텍트론2, 욜로v5, 욜로v8을 최종 모델로 선정하였습니다.

------------------------------------------------------------------------
최종 선정된 모델 학습 결과입니다.
먼저 왼쪽에는 전처리 이전의 성능 결과이며 오른 쪽은 전처리 과정을 거친 후의 성능 수치표입니다.
디텍트론2, 욜로v8 두 모델 모두, 형태가 뚜렷하고 스케일이 큰 객체들에 대해서는 높은 예측률을 보이지만, 크기가 작고 흐릿한 객체들에 대해서는 낮은 수준의 예측률을 보였습니다.
특히 모양과 크기, 위치의 변동이 적은 회로결함의 경우 타 클래스에 비해 전체적으로 객체 탐지 정확도가 높은 편입니다.
다음으로 성능 수치를 향상시켰던 전처리 과정을 소개드리겠습니다.

------------------------------------------------------------------------
총 세 단계에 거친 클래스 재정의 과정입니다.
우선 초기의 6개 클래스에서 데이터 수가 지나치게 적거나 타 클래스와 유사성이 있다고 판단된 두 개의 클래스를 통폐합 하였습니다.
Damage와 mist클래스가 삭제되고 해당 객체는 다른 4개의 클래스로 나누어 들어갔습니다.
이후 회로 결함에 대한 클래스 추가되었고, 총 12개의 클래스가 생성되었습니다.
회로 결함 추가 이후 각 AP 수치 및 예측 시각화를 통해 학습 결과를 모니터링 하였는데,
이때 클래스 내 다른 객체들과의 유사성이 떨어지는 일부 객체들을 새로운 클래스로 추가하며
최종적으로 13개의 클래스를 정의하게 되었습니다. 

------------------------------------------------------------------------
다음은 전처리 과정 중에서 바운딩 박스를 재조정해준 과정도 있었는데요,
해당 과정에서는 4가지의 변화를 통해 모델 성능을 향상 시켰습니다.

화면 왼쪽 위 자료는 박스 여백 추가입니다.
타이트하게 객체만을 잡았던 초기 박스와는 달리, 주변 환경을 함께 잡음으로써 회로의 연결 형태, 혹은 위치 등을 잡을 수 있도록 하였습니다.
단순히 ‘둥근 모양’이 아닌 ‘직선 회로 중간의 둥근 모양’ 등 더 구체적으로 객체를 인식하도록 하였고, 
이를 통해 원형 모양인 c_circle이라는 클래스와 혼동되는 문제를 해결해 두 클래스 모두의 객체 인식률을 높일 수 있었습니다.

그 아래 자료는, 결함을 인식하도록 하는 대상 객체의 변화입니다.
해당 클래스는 기존에 회로의 두께 차이로 급격히 좁아지는 배경을 대상으로 잡았는데,
회로 자체 대상을 객체로 잡도록 했습니다.

화면 오른 쪽 위 자료는 스크래치, 커브 등 객체의 형태를 중요 특징으로 잡는 대상들에 대해서 입니다.
본래는 작은 박스들을 연속적으로 사용해 객체의 형태를 인식하도록 했지만, 다소 정확도가 떨어지고,
특히나 박스 하나하나를 학습해 타 클래스 객체의 일부분을 해당 클래스로 잡는 문제가 발생하였습니다.
때문에 이후에는 한 객체에 대해 하나의 바운딩 박스를, 객체의 테두리를 따라 잡는 방식으로 변경하였습니다.
이를 통해 잘못된 객체를 인식하거나 대상 객체 전체를 잡지 못하는 문제가 해결되었습니다.

그 아래 자료는 바운딩 박스들 간 간격 재조정입니다. 
바운딩 박스를 조정하였을 때 박스들이 서로 겹치는 것이 학습에 방해가 되어, 이후에는 박스 크기를 줄이고 각 박스들의 영역이 겹치지 않도록 변경하였습니다.

------------------------------------------------------------------------
다음은 전처리 과정 중, 데이터 증식 과정입니다.
데이터 증식에서는 이미지 합성을 통한 새로운 학습 이미지 생성, 그리고 OpenCV, 로보플로우 등을 이용한 이미지 데이터 변형이 있었습니다.

이미지 합성에 대해 먼저 설명 드리자면 기존에 학습용으로 사용하던 train 이미지에 타 이미지의 결함 모형을 합성하여, 기존에 없던 새로운 이미지를 생성하였습니다. 
이때 결함의 위치나 크기, 형태 등에 조금씩 변화를 주어 모델이 좀 더 다양한 형태를 학습할 수 있도록 했습니다.
이후 합성한 이미지는 학습용 데이터셋에 추가하여 회전, 뒤집기 등의 2차 변형을 해주었습니다.

------------------------------------------------------------------------
앞서 설명한 것이 기존과는 전혀 다른 새로운 데이터를 추가한 거라면, 
openCV를 활용한 데이터 증식에서는 기존의 이미지를 조금 변형해 모델이 더 다양한 환경을 학습할 수 있도록 하였습니다.
기존 train 데이터셋 중 일부를 뽑아 랜덤으로 색상, 밝기, 채도 등의 변화를 주었고, 마찬가지로 로보플로우에서 회전 및 뒤집기 효과를 추가하였습니다.

------------------------------------------------------------------------
최종적으로 전처리를 마친 데이터셋 구성은 다음과 같습니다.
기존에 337장이던 데이터를 최종적으로 1464장까지 증식하였고, train, validation, test셋이 88:8:4의 비율로 구성되었습니다.
탐지할 대상 클래스의 수는 초기 6가지에서 최종적으로 13가지로 정의하였고,
이러한 데이터셋을 가지고 모델 학습 및 평가, 예측을 수행하였습니다.

------------------------------------------------------------------------
이렇게 완성된 데이터셋으로 웹 구현을 시행하였는데요,
그라디오로 데모버전 웹을 구현한 화면을 소개드리겠습니다.
보시는 바와 같이 첫 번째 박스는 이미지 업로드 박스,
두 번째 박스는 첫 번째에 업로드한 이미지가 출력되는 부분이고,
세 번째 박스는, 예측하기 버튼을 클릭하면 결함을 탐지한 이미지가 출력되는 박스,
네 번째 박스는, 설명보기 버튼을 클릭하면 결함 정보가 출력되는 박스입니다.

------------------------------------------------------------------------
이제 이것을 시현해본 동영상을 보여드리겠습니다.
(꼭재생버튼 ^^)
반도체 칩 이미지 파일을 드래그하여 이미지 파일을 넣어주면 오른 쪽에 업로드한 이미지가 출력이 되고,
예측하기 및 설명보기 버튼을 누르면 보시다시피 결함을 탐지한 이미지가 출력이 되고,
그 옆으로는 결함 정보가 출력됩니다.

웹은 이와 같이 DEMO 형식으로 구현한 상태이며,
차후 수율 정보까지 출력되는 웹을 구현할 예정입니다.
------------------------------------------------------------------------
지금까지 데이터플로우 팀의 발표자 최정인이었습니다.
들어주셔서 감사합니다.
큐앤에이를 받도록 하겠습니다.









----------------
그 부분은 해당 작업을 수행한 팀원이 답변드리겠습니다.